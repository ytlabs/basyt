{"name":"Basyt","tagline":"minimalist nodejs package to create JSON API server.","body":"# basyt\r\nminimalist package to create JSON API server. Typical scenario to use basyt is when you need a rest-like JSON API that provides create/read/update/delete/query actions for your data entities.\r\n\r\n## Installation\r\n\r\n```bash\r\n$ npm install basyt\r\n$ npm install basyt-mongodb-collection\r\n```\r\n\r\n## Features\r\n* is an extension over awesome nodejs framework expressjs\r\n* generates CRUDL API and routing based on entities and controllers located in corresponding folders at the startup\r\n* provides json web token based authentication \r\n* provides redis based notification for entity updates\r\n* provides user management and role based access control\r\n\r\nPlease review test folder, there you will find a sample web application exposing test\\_entity and test\\_relation entities.\r\n\r\n## Quick Start\r\nTo utilize basyt as foundation of your API, you need several declarations. Firstly basyt needs global APP_CONFIG object.\r\n\r\n```js\r\nGLOBAL.APP_CONFIG = {\r\n    base_folder: __dirname + '/', \r\n    //base_folder definition is required, you probably will keep this line as it is\r\n    \r\n    package_file: GLOBAL.APP_CONFIG.base_folder + 'package.json', \r\n    //path for package.json file. basyt uses package.json to get application name and version.\r\n    //when not defined package_file is set to base_folder + 'package.json'\r\n    \r\n    basyt: { //scope for basyt related configuration\r\n        port: 5850, \r\n        //port number that basyt HTTP server will listen\r\n        entity_path: '/',\r\n        //url base path for entity API endpoints. default is '/'\r\n        //if it is set to 'foo' then base address for entity is http://hostname/foo/entity\r\n        entities_folder: GLOBAL.APP_CONFIG.base_folder + 'entities',\r\n        //path for folder that contains entity definitions.\r\n        //when not defined, entities_folder is set to base_folder + 'entities'\r\n        controllers_folder: GLOBAL.APP_CONFIG.base_folder + 'controllers',\r\n        //path for folder that contains entity-free controller definitions.\r\n        //when not defined, controllers_folder is set to base_folder + 'controllers'\r\n        enable_ws: true,\r\n        //enables socket.io based websocket. default true\r\n        enable_cors: true, \r\n        //enables CORS setup. default false\r\n        enable_auth: true,\r\n        //enables user management and authentication. default true\r\n        cors: { \r\n          //CORS headers to be setup. Required only when enable_cors is true\r\n          //following values can be set for CORS setup.\r\n          //Content_Type header field is allowed by default\r\n          //Authorization header is allowed when auth is enabled\r\n            origin: 'http://localhost:8580',\r\n            methods: 'GET,PUT,POST,DELETE',\r\n            headers: ['accept']\r\n        },\r\n        auth: {\r\n          //required when enable_auth is true.\r\n            token: 'your.secret.token',\r\n            //token to be used for jwt\r\n            method: 'jwt'\r\n            //currently only supported method is jwt\r\n        }\r\n        disable_discovery: false, \r\n        //when discovery is enabled, GET request to server's base address will provide all possible API\r\n    },\r\n    mongodb: { //scope for mongodb collection configuration\r\n        connection: 'mongodb://localhost/basyt_db'\r\n    }\r\n};\r\n```\r\n\r\nafter declaring global APP_CONFIG, you simply instantiate basyt\r\n\r\n```js\r\nvar basyt = require('basyt');\r\nvar basytApp = basyt();\r\n````\r\n\r\nbasyt explores entities and controllers in corresponding folders and generates API endpoints. In entities folder, entity declarations are like in the following example\r\n\r\n```js\r\nmodule.exports = {\r\n    collection: { //collection is database aspect of entity\r\n        storage: \"mongodb\",\r\n        //currently the only storage option is mongodb. it is used to select collection\r\n        name: \"test_entity\",\r\n        //name of entity, used for url path and as collection name\r\n        strict: true,\r\n        //when collection is NOT strict, it accepts attributes that are not defined in attributes list\r\n        attributes: { //list of the attributes of entity\r\n            //following attributes are given as example\r\n            name: {type: \"string\", required: true},\r\n            email: \"email\",\r\n            url: \"url\",\r\n            telephone: {\r\n                type: \"numeric\",\r\n                minLength: 7,\r\n                maxLength: 11\r\n            }\r\n        },\r\n        event_names: ['{{obj.email}}:test_entity'],\r\n        //basyt emits redis event for entity updates. \r\n        //By default, it emits entity:{{entity name}}:{{object id}} event\r\n        //for additional events event_names list is used.\r\n        methods: {\r\n          //list of collection methods\r\n          //here hook functions for entity can be defined. for instance beforeCreate, afterCreate etc.\r\n          //see basyt-base-collection/index.js hook functions for complete hook functions and their\r\n          //signature\r\n        }\r\n    },\r\n    auth_levels: {\r\n      //authentication levels for API actions for entity. Default authentication level is 'USER'\r\n      'read': 'USER',\r\n      'list': 'USER',\r\n      'update': 'USER',\r\n      'update_bulk': 'USER',\r\n      'query': 'USER',\r\n      'create': 'USER',\r\n      'create_bulk': 'USER',\r\n      'delete': 'USER',\r\n      'delete_bulk': 'USER'\r\n    },\r\n    //you can disable/enable any API action for entity.\r\n    disable_read: false,\r\n    disable_list: false,\r\n    disable_update: false,\r\n    disable_delete_bulk: true,\r\n    disable_create_bulk: true,\r\n    disable_update_bulk: true,\r\n    customActions: {\r\n      //here you can define any other actions for the entity\r\n      test: {\r\n        path: '/:entity_id/test',\r\n        //url path that action will bind to\r\n        method: 'put',\r\n        //HTTP method for the action\r\n        auth_level: 'ADMIN',\r\n        //Authentication level for the action\r\n        action: function custom_action(req, res) {\r\n          //action function\r\n          return res.json({success: true});\r\n        }\r\n      }\r\n    }\r\n};\r\n```\r\n\r\nIn controllers folder, entity-free controllers are declared. Those controller files include definitions similar to customActions field of entity declarations.\r\n\r\n```js\r\nmodule.exports = {\r\n    example_action: {\r\n      path: '/example_action',\r\n      //url path that action will bind to\r\n      method: 'GET',\r\n      //HTTP method for the action\r\n      auth_level: 'USER',\r\n      //Authentication level for the action\r\n      action: function example_action(req, res) {\r\n        //action function\r\n        return res.json({success: true});\r\n      }\r\n    }\r\n  };\r\n```\r\n\r\nFor a controller file named `test\\_controller.js` with content given above, there will be an api for address `http://hostname/test_controller/example_action`.\r\n\r\nThat's all for a quick start. Wiki pages are coming soon!\r\n  \r\n## Why do we call it basyt\r\nIn Turkish *basit* means *simple*. That is the motivation: an extension over expressjs to make things simpler. Since our company's initials are YT, we decided to call the project **basyt**, simple web package from Yonca Teknoloji.\r\n\r\n","google":"UA-59539654-1","note":"Don't delete this file! It's used internally to help with page regeneration."}